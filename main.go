package main

import (
	"fmt"
	"go-mythril/analysis/module"
	"go-mythril/analysis/module/modules"
	"go-mythril/laser/ethereum"
)

type C struct {
	Size int
}

func main() {

	fmt.Println("go mythril")
	loader := module.NewModuleLoader()
	evm := ethereum.NewLaserEVM(1, 1, 1, loader)

	/* code for Origin.sol */
	// testOriginCreateBytecode := "6080604052348015600f57600080fd5b5060ad8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555056fea2646970667358221220cc40cae2e419544393419c7a7ea32f42d341094e9dc31099df83cbe79983591164736f6c63430008070033"
	// testOriginRuntimeBytecode := "6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555056fea2646970667358221220cc40cae2e419544393419c7a7ea32f42d341094e9dc31099df83cbe79983591164736f6c63430008070033"

	/* code for IntegerOverflow.sol */
	// integerOverflowCreateBytecode := "6080604052600160005534801561001557600080fd5b506101e3806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631003e2d21461003b578063b69ef8a814610057575b600080fd5b610055600480360381019061005091906100ab565b610075565b005b61005f610090565b60405161006c91906100e7565b60405180910390f35b806000808282546100869190610102565b9250508190555050565b60005481565b6000813590506100a581610196565b92915050565b6000602082840312156100c1576100c0610191565b5b60006100cf84828501610096565b91505092915050565b6100e181610158565b82525050565b60006020820190506100fc60008301846100d8565b92915050565b600061010d82610158565b915061011883610158565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561014d5761014c610162565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61019f81610158565b81146101aa57600080fd5b5056fea264697066735822122087b595ab091f2f063af4481cbf3f5906249a224c0b0e343c050f64821d66d84864736f6c63430008070033"
	// integetOverflowRuntimeBytecode := "608060405234801561001057600080fd5b50600436106100365760003560e01c80631003e2d21461003b578063b69ef8a814610057575b600080fd5b610055600480360381019061005091906100ab565b610075565b005b61005f610090565b60405161006c91906100e7565b60405180910390f35b806000808282546100869190610102565b9250508190555050565b60005481565b6000813590506100a581610196565b92915050565b6000602082840312156100c1576100c0610191565b5b60006100cf84828501610096565b91505092915050565b6100e181610158565b82525050565b60006020820190506100fc60008301846100d8565b92915050565b600061010d82610158565b915061011883610158565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561014d5761014c610162565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61019f81610158565b81146101aa57600080fd5b5056fea264697066735822122087b595ab091f2f063af4481cbf3f5906249a224c0b0e343c050f64821d66d84864736f6c63430008070033"

	/* code: PUSH32(max of 256bits) PUSH1(0x2) ADD PUSH1(0x29) JUMPI PUSH1(0x01) JUMPDEST STOP */
	mytestcode := "7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020160295760015b00"
	evm.NormalSymExec(mytestcode)
	issues := loader.Modules[0].(*modules.IntegerArithmetics).Issues
	for _, issue := range issues {
		fmt.Println("ContractName:", issue.Contract)
		fmt.Println("FunctionName:", issue.FunctionName)
		fmt.Println("Title:", issue.Title)
		fmt.Println("SWCID:", issue.SWCID)
		fmt.Println("Address:", issue.Address)
		fmt.Println("Severity", issue.Severity)
	}

	return

	/*	evm.NormalSymExec("6060320032")
		return*/

	/*	fmt.Println("go mythril-testForGoz3")
		config := z3.NewConfig()
		ctx := z3.NewContext(config)
		config.Close()
		defer ctx.Close()

		s := ctx.NewSolver()
		defer s.Close()

		x := ctx.NewBitvecVal(7, 16)
		y := ctx.NewBitvecVal(1, 16)
		z := ctx.NewBitvec("z", 16)
		fmt.Println(x.Value(), x.BvSize())
		fmt.Println(y.Value(), y.BvSize())
		fmt.Println(z.Value(), z.BvSize())
		fmt.Println(x.BvAdd(y).Value(), x.BvAdd(y).BvSize())

		s.Assert(z.Eq(x.BvAdd(y)).AsAST())

		if v := s.Check(); v != z3.True {
			fmt.Println("Unsolveable")
			return
		}

		m := s.Model()
		answer := m.Assignments()
		fmt.Println("solver0's result:")
		fmt.Println(answer)
		fmt.Println(z.Value(), z.BvSize())*/
}
